#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ adarshah.org
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞
"""

import asyncio
import json
import os
import re
import base64
import time
from pathlib import Path
from typing import List, Dict, Optional, Tuple
from datetime import datetime
import aiohttp
from playwright.async_api import async_playwright, Page, Browser, ElementHandle
from urllib.parse import urljoin, urlparse, parse_qs


class ImprovedTibetanScraper:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å —Ç–æ—á–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–æ–≤"""
    
    def __init__(self, output_dir: str = "tibetan_data", kdb: str = "degekangyur", sutra: str = "d1",
                 image_format: str = "png", jpeg_quality: int = 95, delay_between_pages: float = 2.0,
                 volume_sutras: Optional[Dict[int, str]] = None, auto_sutra: bool = False, 
                 max_sutra_attempts: int = 10, max_failed_pages: int = 5, quiet_mode: bool = False):
        self.output_dir = Path(output_dir)
        self.images_dir = self.output_dir / "images"
        self.texts_dir = self.output_dir / "texts"
        self.metadata_file = self.output_dir / "metadata.json"
        self.raw_dir = self.output_dir / "raw_html"  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.images_dir.mkdir(parents=True, exist_ok=True)
        self.texts_dir.mkdir(parents=True, exist_ok=True)
        self.raw_dir.mkdir(parents=True, exist_ok=True)
        
        self.base_url = "https://online.adarshah.org/"
        self.kdb = kdb  # –ö–∞—Ç–∞–ª–æ–≥ (degekangyur, degetengyur –∏ —Ç.–¥.)
        self.sutra = sutra  # –°—É—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (d1, D1109 –∏ —Ç.–¥.)
        self.volume_sutras = volume_sutras or {}  # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ volume -> sutra
        self.auto_sutra = auto_sutra  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä sutra
        self.max_sutra_attempts = max_sutra_attempts  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ sutra
        self.image_format = image_format.lower()  # 'png' –∏–ª–∏ 'jpeg'
        self.jpeg_quality = jpeg_quality  # –ö–∞—á–µ—Å—Ç–≤–æ JPEG (1-100)
        self.delay_between_pages = delay_between_pages  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        self.max_failed_pages = max_failed_pages  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É volume
        self.quiet_mode = quiet_mode  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º - –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        self.metadata = []
        self.last_successful_sutra = sutra  # –ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω–∞—è sutra (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ volume
        self.current_volume = None
        self.failed_pages_in_volume = 0
        
        # –ö–≠–® –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π HTML –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É Playwright
        self.cached_html = None  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç
        self.cached_page_id = None  # ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω HTML
        self.cached_available_pages = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º HTML
        self.http_requests_saved = 0  # –°—á–µ—Ç—á–∏–∫ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    
    def get_sutra_for_volume(self, volume: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å sutra –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ volume, –∏—Å–ø–æ–ª—å–∑—É—è mapping –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω auto_sutra, –∏—Å–ø–æ–ª—å–∑—É–µ–º last_successful_sutra –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # (–µ—Å–ª–∏ –¥–ª—è volume –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ sutra)
        if self.auto_sutra:
            return self.volume_sutras.get(volume, self.last_successful_sutra)
        else:
            return self.volume_sutras.get(volume, self.sutra)
    
    def increment_sutra(self, sutra: str) -> str:
        """
        –£–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å sutra –Ω–∞ 1
        –ü—Ä–∏–º–µ—Ä—ã: d1 -> d2, D1109 -> D1110, d999 -> d1000
        """
        import re
        # –ò—â–µ–º —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
        match = re.match(r'^([^\d]*)(\d+)$', sutra)
        if match:
            prefix = match.group(1)
            number = int(match.group(2))
            return f"{prefix}{number + 1}"
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            print(f"  ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ sutra: {sutra}")
            return sutra
    
    def parse_sutra_number(self, sutra: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ sutra"""
        import re
        match = re.search(r'(\d+)$', sutra)
        return int(match.group(1)) if match else None
    
    def extract_available_pages_from_html(self, html_content: str) -> set:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        –ò—â–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã data-pbname –≤ HTML
        """
        import re
        available_pages = set()
        
        # –ò—â–µ–º –≤—Å–µ data-pbname="X-Xa" –∏–ª–∏ data-pbname="X-Xb"
        pattern = r'data-pbname="(\d+-\d+[ab])"'
        matches = re.findall(pattern, html_content)
        available_pages.update(matches)
        
        if not self.quiet_mode and available_pages:
            print(f"  üì¶ –í HTML –Ω–∞–π–¥–µ–Ω–æ {len(available_pages)} —Å—Ç—Ä–∞–Ω–∏—Ü: {sorted(available_pages)[:10]}{'...' if len(available_pages) > 10 else ''}")
        
        return available_pages
    
    async def cache_current_page(self, page: Page, page_id: str):
        """
        –ö—ç—à–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            html_content = await page.content()
            self.cached_html = html_content
            self.cached_page_id = page_id
            self.cached_available_pages = self.extract_available_pages_from_html(html_content)
            
            if not self.quiet_mode:
                print(f"  üíæ HTML –∫—ç—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_id}")
        except Exception as e:
            print(f"  ‚ö† –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è HTML: {str(e)}")
    
    def is_page_in_cache(self, page_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º HTML
        """
        return page_id in self.cached_available_pages
    
    async def load_cached_html_to_page(self, page: Page, page_id: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –≤ Playwright —Å—Ç—Ä–∞–Ω–∏—Ü—É
        –≠—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            if self.cached_html:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º setContent –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ HTML –±–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å–∞
                await page.set_content(self.cached_html, wait_until='domcontentloaded')
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
                await page.wait_for_timeout(1000)
                
                if not self.quiet_mode:
                    print(f"  ‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML (HTTP –∑–∞–ø—Ä–æ—Å –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω)")
                
                self.http_requests_saved += 1
                return True
        except Exception as e:
            print(f"  ‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {str(e)}")
        
        return False
        
    async def wait_for_page_load(self, page: Page, timeout: int = 30000):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await page.wait_for_load_state('networkidle', timeout=timeout)
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è canvas –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∏–ª—Å—è)
            try:
                await page.wait_for_selector('canvas, img[src*="jpg"], img[src*="png"]', 
                                             timeout=15000, state='visible')
                if not self.quiet_mode:
                    print(f"  ‚úì –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception:
                print(f"  ‚ö† Canvas/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫")
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ lazy-loaded –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            try:
                if not self.quiet_mode:
                    print(f"  ‚Üí –ó–∞–≥—Ä—É–∑–∫–∞ lazy-loaded –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
                
                # –¢—Ä–∏–≥–≥–µ—Ä–∏–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö lazy images
                await page.evaluate("""
                    () => {
                        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤—Å–µ—Ö lazy loaders
                        window.scrollTo(0, document.body.scrollHeight / 2);
                    }
                """)
                await page.wait_for_timeout(1500)
                
                await page.evaluate('window.scrollTo(0, document.body.scrollHeight)')
                await page.wait_for_timeout(3000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                
                await page.evaluate('window.scrollTo(0, 0)')
                await page.wait_for_timeout(2000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É lazy images
                await page.evaluate("""
                    () => {
                        const lazyImages = document.querySelectorAll('img.lazy');
                        lazyImages.forEach(img => {
                            if (img.dataset.src) {
                                img.src = img.dataset.src;
                            }
                            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è lazy loader
                            img.dispatchEvent(new Event('load'));
                        });
                    }
                """)
                await page.wait_for_timeout(2000)
                
            except Exception as e:
                print(f"  ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            await page.wait_for_timeout(2000)
        except Exception as e:
            print(f"  ‚ö† –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    async def extract_image_from_canvas(self, page: Page) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ canvas —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è canvas –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if self.image_format == 'jpeg':
                mime_type = 'image/jpeg'
                quality = self.jpeg_quality / 100.0
            else:
                mime_type = 'image/png'
                quality = 1.0  # PNG –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç quality, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ canvas –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            canvas_data = await page.evaluate("""
                ({mimeType, quality}) => {
                    const canvas = document.querySelector('canvas');
                    if (canvas) {
                        try {
                            if (mimeType === 'image/png') {
                                return canvas.toDataURL(mimeType);
                            } else {
                                return canvas.toDataURL(mimeType, quality);
                            }
                        } catch (e) {
                            console.error('Error getting canvas data:', e);
                            return null;
                        }
                    }
                    return null;
                }
            """, {'mimeType': mime_type, 'quality': quality})
            return canvas_data
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ canvas: {str(e)}")
            return None
    
    async def find_page_image(self, page: Page, page_id: str) -> Optional[Tuple[str, str]]:
        """
        –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (image_data, source_type) –≥–¥–µ source_type = 'canvas' | 'img' | 'screenshot'
        """
        # –°–ø–æ—Å–æ–± 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ canvas
        canvas_data = await self.extract_image_from_canvas(page)
        if canvas_data:
            return (canvas_data, 'canvas')
        
        # –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ img —ç–ª–µ–º–µ–Ω—Ç–∞
        try:
            img_src = await page.evaluate("""
                (pageId) => {
                    const images = document.querySelectorAll('img');
                    console.log(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${images.length}`);
                    
                    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã pageId –¥–ª—è –ø–æ–∏—Å–∫–∞
                    // –ù–∞–ø—Ä–∏–º–µ—Ä: "3-1b" -> ["3-1b", "31b", "3-1-1b"]
                    const searchPatterns = [pageId];
                    
                    // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã
                    searchPatterns.push(pageId.replace(/-/g, ''));
                    
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç {vol}-{page}{side} –≤ {vol}-{page}-{page}{side}
                    const parts = pageId.split('-');
                    if (parts.length === 2) {
                        const vol = parts[0];
                        const pageMatch = parts[1].match(/^(\\d+)([ab])$/);
                        if (pageMatch) {
                            const pageNum = pageMatch[1];
                            const pageSide = pageMatch[2];
                            // "3-1b" -> "3-1-1b"
                            searchPatterns.push(`${vol}-${pageNum}-${pageNum}${pageSide}`);
                            // –¢–∞–∫–∂–µ –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤
                            searchPatterns.push(`${vol}${pageNum}${pageNum}${pageSide}`);
                        }
                    }
                    
                    console.log(`–ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:`, searchPatterns);
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è debug
                    images.forEach((img, idx) => {
                        if (idx < 5) {
                            console.log(`Image ${idx}: src="${img.src || 'none'}", class="${img.className}", width=${img.width}, height=${img.height}, parent="${img.parentElement?.className || 'none'}"`);
                        }
                    });
                    
                    // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                    for (const img of images) {
                        const src = img.src || img.dataset.src || '';
                        const alt = img.alt || '';
                        const id = img.id || '';
                        
                        for (const pattern of searchPatterns) {
                            if (src.includes(pattern) || alt === pattern || id === pattern) {
                                console.log(`‚úì –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É ${pattern}: ${src}`);
                                return img.src;
                            }
                        }
                    }
                    
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ, –∏—â–µ–º img —Å –∫–ª–∞—Å—Å–æ–º image-pb –∏–ª–∏ lazy
                    for (const img of images) {
                        const parent = img.parentElement;
                        if (parent && parent.classList.contains('image-pb')) {
                            console.log('‚úì –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ image-pb:', img.src);
                            return img.src;
                        }
                    }
                    
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∫—Ä—É–ø–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–ª–∞—Å—Å–æ–º lazy
                    for (const img of images) {
                        if (img.classList.contains('lazy') && img.width > 300 && img.height > 300) {
                            console.log('‚úì –ù–∞–π–¥–µ–Ω–æ lazy –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', img.src);
                            return img.src;
                        }
                    }
                    
                    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –ª—é–±–æ–µ –∫—Ä—É–ø–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    for (const img of images) {
                        if (img.width > 300 && img.height > 300) {
                            console.log('‚úì –ù–∞–π–¥–µ–Ω–æ –∫—Ä—É–ø–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', img.src);
                            return img.src;
                        }
                    }
                    
                    console.log('‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                    return null;
                }
            """, page_id)
            
            if img_src:
                return (img_src, 'img')
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ img: {str(e)}")
        
        # –°–ø–æ—Å–æ–± 3: –°–∫—Ä–∏–Ω—à–æ—Ç –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
        try:
            # –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–∞—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
            element = await page.query_selector('body')
            if element:
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                if self.image_format == 'jpeg':
                    screenshot = await element.screenshot(type='jpeg', quality=self.jpeg_quality)
                    screenshot_b64 = base64.b64encode(screenshot).decode()
                    return (f"data:image/jpeg;base64,{screenshot_b64}", 'screenshot')
                else:
                    screenshot = await element.screenshot(type='png')
                    screenshot_b64 = base64.b64encode(screenshot).decode()
                    return (f"data:image/png;base64,{screenshot_b64}", 'screenshot')
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
        
        return None
    
    async def extract_tibetan_text(self, page: Page, page_id: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–±–µ—Ç—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Ä–∫–µ—Ä—ã <jp> –∏ data-pbname –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        """
        try:
            text_data = await page.evaluate("""
                (pageId) => {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º page_id –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è jp –º–∞—Ä–∫–µ—Ä–∞
                    // –ù–∞–ø—Ä–∏–º–µ—Ä: "1-1b" -> "1-1-1b"
                    const parts = pageId.split('-');
                    let jpId;
                    if (parts.length === 2) {
                        // –§–æ—Ä–º–∞—Ç: "1-1b" -> "1-1-1b"
                        jpId = parts[0] + '-' + parts[1].slice(0, -1) + '-' + parts[1];
                    } else {
                        jpId = pageId;
                    }
                    
                    // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º <jp>
                    const jpStart = document.querySelector(`jp[id="${jpId}"]`);
                    let textByJp = '';
                    
                    if (jpStart) {
                        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π jp –º–∞—Ä–∫–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã
                        let currentNode = jpStart.nextSibling;
                        while (currentNode) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º jp –º–∞—Ä–∫–µ—Ä–æ–º
                            if (currentNode.nodeName === 'JP') {
                                break;
                            }
                            
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                            if (currentNode.nodeType === Node.TEXT_NODE) {
                                textByJp += currentNode.textContent;
                            } else if (currentNode.nodeType === Node.ELEMENT_NODE) {
                                textByJp += currentNode.textContent;
                            }
                            
                            currentNode = currentNode.nextSibling;
                        }
                    }
                    
                    // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É data-pbname
                    const textElements = document.querySelectorAll(`span.text-pb[data-pbname="${pageId}"]`);
                    let textByAttr = '';
                    
                    textElements.forEach(el => {
                        textByAttr += el.textContent;
                    });
                    
                    // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç
                    let finalText = '';
                    let method = '';
                    
                    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    function cleanText(text) {
                        // –£–¥–∞–ª—è–µ–º ID —Å—Ç—Ä–∞–Ω–∏—Ü –≤–∏–¥–∞ "1-2a"
                        text = text.replace(/\\d+-\\d+[ab]/g, '');
                        // –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
                        text = text.replace(/\\s+/g, ' ');
                        return text.trim();
                    }
                    
                    if (textByJp && /[\u0F00-\u0FFF]/.test(textByJp)) {
                        finalText = cleanText(textByJp);
                        method = 'jp-markers';
                    } else if (textByAttr && /[\u0F00-\u0FFF]/.test(textByAttr)) {
                        finalText = cleanText(textByAttr);
                        method = 'data-pbname';
                    }
                    
                    if (finalText) {
                        return {
                            text: finalText,
                            method: method,
                            jp_id: jpId,
                            elements_found: textElements.length
                        };
                    }
                    
                    return null;
                }
            """, page_id)
            
            if text_data and text_data.get('text'):
                if not self.quiet_mode:
                    print(f"  ‚Ñπ –ú–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {text_data['method']}")
                    print(f"  ‚Ñπ JP ID: {text_data['jp_id']}")
                    if text_data.get('elements_found'):
                        print(f"  ‚Ñπ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {text_data['elements_found']}")
                return text_data['text']
            
            return None
            
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return None
    
    def save_image(self, image_data: str, filename: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ data URL –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ URL"""
        try:
            filepath = self.images_dir / filename
            
            if image_data.startswith('data:'):
                # –≠—Ç–æ data URL, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º base64
                header, encoded = image_data.split(',', 1)
                decoded = base64.b64decode(encoded)
                with open(filepath, 'wb') as f:
                    f.write(decoded)
            else:
                # –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                with open(filepath, 'wb') as f:
                    f.write(image_data)
            
            if not self.quiet_mode:
                print(f"  ‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
            return True
            
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            return False
    
    async def download_image_url(self, session: aiohttp.ClientSession, url: str, filename: str) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL"""
        try:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=30)) as response:
                if response.status == 200:
                    content = await response.read()
                    filepath = self.images_dir / filename
                    with open(filepath, 'wb') as f:
                        f.write(content)
                    if not self.quiet_mode:
                        print(f"  ‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {filename}")
                    return True
                else:
                    print(f"  ‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: —Å—Ç–∞—Ç—É—Å {response.status}")
                    return False
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            return False
    
    def save_text(self, page_id: str, text: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            filepath = self.texts_dir / f"{page_id}.txt"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(text)
            if not self.quiet_mode:
                print(f"  ‚úì –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {page_id}.txt ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return True
        except Exception as e:
            print(f"  ‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return False
    
    async def save_page_html(self, page: Page, page_id: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            html = await page.content()
            filepath = self.raw_dir / f"{page_id}.html"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(html)
        except Exception as e:
            print(f"  ‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML: {str(e)}")
    
    def save_metadata(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        with open(self.metadata_file, 'w', encoding='utf-8') as f:
            json.dump(self.metadata, f, ensure_ascii=False, indent=2)
        print(f"\n‚úì –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(self.metadata)} –∑–∞–ø–∏—Å–µ–π")
    
    async def auto_detect_sutra_for_volume(self, page: Page, session: aiohttp.ClientSession, 
                                           volume: int) -> Optional[str]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä sutra –¥–ª—è volume –ø—É—Ç–µ–º –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é sutra –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        if not self.quiet_mode:
            print(f"\n  üîç –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä sutra –¥–ª—è volume {volume}...")
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π sutra (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: sutra –æ–±—ã—á–Ω–æ —Ä–∞—Å—Ç—É—Ç —Å volume)
        current_sutra = self.last_successful_sutra
        if not self.quiet_mode:
            print(f"  ‚Ñπ –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π sutra: {current_sutra}")
        
        page_id = f"{volume}-1b"  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–º–∞
        
        for attempt in range(self.max_sutra_attempts):
            try:
                url = f"{self.base_url}index.html?kdb={self.kdb}&sutra={current_sutra}&page={page_id}"
                if not self.quiet_mode:
                    print(f"  ‚Üí –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_sutra_attempts}: sutra={current_sutra}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                await page.goto(url, wait_until='domcontentloaded', timeout=30000)
                time.sleep(2)
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                image_result = await self.find_page_image(page, page_id)
                
                # –í–ê–ñ–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (canvas –∏–ª–∏ img), –ù–ï screenshot
                if image_result:
                    image_data, source_type = image_result
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç
                    if source_type in ['canvas', 'img']:
                        if not self.quiet_mode:
                            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è sutra: {current_sutra} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source_type})")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é sutra –¥–ª—è —ç—Ç–æ–≥–æ volume
                        self.volume_sutras[volume] = current_sutra
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é sutra –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö volume
                        self.last_successful_sutra = current_sutra
                        return current_sutra
                    else:
                        print(f"  ‚úó Sutra {current_sutra} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (–ø–æ–ª—É—á–µ–Ω —Ç–æ–ª—å–∫–æ {source_type}, –Ω—É–∂–µ–Ω canvas/img)")
                else:
                    print(f"  ‚úó Sutra {current_sutra} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
                    
            except Exception as e:
                print(f"  ‚úó Sutra {current_sutra} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (–æ—à–∏–±–∫–∞: {str(e)[:50]}...)")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º sutra –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            current_sutra = self.increment_sutra(current_sutra)
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á—É—é sutra –ø–æ—Å–ª–µ {self.max_sutra_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return None
    
    async def scrape_page(self, page: Page, session: aiohttp.ClientSession, page_id: str, 
                         max_retries: int = 3) -> Tuple[bool, bool]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        
        Returns:
            Tuple[bool, bool]: (success, used_cache)
                - success: True –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                - used_cache: True –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫—ç—à (–Ω–µ –±—ã–ª–æ HTTP –∑–∞–ø—Ä–æ—Å–∞)
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º volume –∏–∑ page_id (—Ñ–æ—Ä–º–∞—Ç: "volume-page{a/b}")
        volume = int(page_id.split('-')[0])
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä sutra –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–º–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω auto_sutra)
        # –ü—Ä–∏ auto_sutra –≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–æ–≤–æ–≥–æ volume,
        # –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ volume_sutras
        if self.auto_sutra and page_id == f"{volume}-1b":
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é sutra –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å last_successful_sutra
            if volume in self.volume_sutras:
                if not self.quiet_mode:
                    print(f"  ‚Ñπ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é sutra –¥–ª—è volume {volume}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä")
                del self.volume_sutras[volume]
            
            detected_sutra = await self.auto_detect_sutra_for_volume(page, session, volume)
            if detected_sutra is None:
                print(f"\n  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å sutra –¥–ª—è volume {volume}")
                if not self.quiet_mode:
                    print(f"  ‚Ñπ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é sutra ({self.last_successful_sutra}) –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é sutra –¥–ª—è —ç—Ç–æ–≥–æ volume
                self.volume_sutras[volume] = self.last_successful_sutra
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
        used_cache = False
        
        for attempt in range(1, max_retries + 1):
            try:
                if attempt > 1:
                    print(f"\n  üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}")
                    time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                
                if not self.quiet_mode:
                    print(f"\n{'='*60}")
                    print(f"‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_id}")
                    print(f"{'='*60}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é sutra –¥–ª—è —ç—Ç–æ–≥–æ volume
                page_sutra = self.get_sutra_for_volume(volume)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —Å—É—Ç—Ä—ã
                url = f"{self.base_url}index.html?kdb={self.kdb}&sutra={page_sutra}&page={page_id}"
                
                # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –∫—ç—à–µ
                page_loaded_from_cache = False
                if self.is_page_in_cache(page_id):
                    if not self.quiet_mode:
                        print(f"  üéØ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å")
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML
                    page_loaded_from_cache = await self.load_cached_html_to_page(page, page_id)
                    if page_loaded_from_cache:
                        used_cache = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫—ç—à
                
                # –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∏–∑ –∫—ç—à–∞, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å
                if not page_loaded_from_cache:
                    if not self.quiet_mode:
                        print(f"  URL: {url}")
                        print(f"  Volume: {volume}, Sutra: {page_sutra}")
                        if self.auto_sutra and volume in self.volume_sutras:
                            print(f"  ‚Ñπ Sutra –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout
                    await page.goto(url, wait_until='domcontentloaded', timeout=60000)
                    await self.wait_for_page_load(page)
                    
                    # –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π HTML –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    await self.cache_current_page(page, page_id)
            
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                await self.save_page_html(page, page_id)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if not self.quiet_mode:
                    print(f"\n  ‚Üí –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                image_result = await self.find_page_image(page, page_id)
                
                image_saved = False
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                file_extension = 'jpg' if self.image_format == 'jpeg' else 'png'
                image_filename = f"{page_id}.{file_extension}"
                image_source = None
                
                if image_result:
                    image_data, source_type = image_result
                    image_source = source_type
                    if not self.quiet_mode:
                        print(f"  ‚Ñπ –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {source_type}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                    if source_type == 'screenshot':
                        print(f"  ‚ö† –ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–º–µ—Å—Ç–æ canvas/img - –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")
                        print(f"  ‚úó –°–∫—Ä–∏–Ω—à–æ—Ç –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
                        
                        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω auto_sutra, –ø—Ä–æ–±—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å sutra
                        if self.auto_sutra and attempt < max_retries:
                            if not self.quiet_mode:
                                print(f"  üîç –ü—Ä–æ–±—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å sutra...")
                            tried_sutras = []
                            current_sutra = page_sutra
                            
                            for sutra_attempt in range(self.max_sutra_attempts):
                                current_sutra = self.increment_sutra(current_sutra)
                                tried_sutras.append(current_sutra)
                                if not self.quiet_mode:
                                    print(f"  ‚Üí –ü–æ–ø—ã—Ç–∫–∞ —Å sutra: {current_sutra}")
                                
                                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –Ω–æ–≤–æ–π sutra
                                new_url = f"{self.base_url}index.html?kdb={self.kdb}&sutra={current_sutra}&page={page_id}"
                                await page.goto(new_url, wait_until='domcontentloaded', timeout=60000)
                                await self.wait_for_page_load(page)
                                time.sleep(1)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                new_image_result = await self.find_page_image(page, page_id)
                                if new_image_result:
                                    new_image_data, new_source_type = new_image_result
                                    if new_source_type in ['canvas', 'img']:
                                        if not self.quiet_mode:
                                            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è sutra: {current_sutra}")
                                        # –û–±–Ω–æ–≤–ª—è–µ–º sutra –¥–ª—è —ç—Ç–æ–≥–æ volume
                                        self.volume_sutras[volume] = current_sutra
                                        self.last_successful_sutra = current_sutra
                                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                                        image_result = new_image_result
                                        image_data = new_image_data
                                        source_type = new_source_type
                                        image_source = new_source_type
                                        url = new_url
                                        break
                            else:
                                # –ù–µ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á—É—é sutra
                                print(f"  ‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è sutra –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫: {', '.join(tried_sutras)}")
                                if attempt < max_retries:
                                    continue
                                else:
                                    image_saved = False
                        elif attempt < max_retries:
                            continue
                        else:
                            image_saved = False
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ source_type –Ω–µ screenshot
                    if source_type != 'screenshot':
                        if source_type == 'img' and not image_data.startswith('data:'):
                            # –≠—Ç–æ URL, –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å
                            full_url = urljoin(self.base_url, image_data)
                            image_saved = await self.download_image_url(session, full_url, image_filename)
                        else:
                            # –≠—Ç–æ data URL –∏–ª–∏ —É–∂–µ –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (canvas –∏–ª–∏ img —Å data:)
                            image_saved = self.save_image(image_data, image_filename)
                else:
                    print(f"  ‚úó –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω auto_sutra, –ø—Ä–æ–±—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å sutra
                    if self.auto_sutra and attempt < max_retries:
                        if not self.quiet_mode:
                            print(f"  üîç –ü—Ä–æ–±—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å sutra...")
                        tried_sutras = []
                        current_sutra = page_sutra
                        
                        for sutra_attempt in range(self.max_sutra_attempts):
                            current_sutra = self.increment_sutra(current_sutra)
                            tried_sutras.append(current_sutra)
                            if not self.quiet_mode:
                                print(f"  ‚Üí –ü–æ–ø—ã—Ç–∫–∞ —Å sutra: {current_sutra}")
                            
                            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –Ω–æ–≤–æ–π sutra
                            new_url = f"{self.base_url}index.html?kdb={self.kdb}&sutra={current_sutra}&page={page_id}"
                            await page.goto(new_url, wait_until='domcontentloaded', timeout=60000)
                            await self.wait_for_page_load(page)
                            time.sleep(1)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            new_image_result = await self.find_page_image(page, page_id)
                            if new_image_result:
                                new_image_data, new_source_type = new_image_result
                                if new_source_type in ['canvas', 'img']:
                                    if not self.quiet_mode:
                                        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è sutra: {current_sutra}")
                                    # –û–±–Ω–æ–≤–ª—è–µ–º sutra –¥–ª—è —ç—Ç–æ–≥–æ volume
                                    self.volume_sutras[volume] = current_sutra
                                    self.last_successful_sutra = current_sutra
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                                    image_result = new_image_result
                                    image_data = new_image_data
                                    source_type = new_source_type
                                    image_source = new_source_type
                                    url = new_url
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    if source_type == 'img' and not image_data.startswith('data:'):
                                        full_url = urljoin(self.base_url, image_data)
                                        image_saved = await self.download_image_url(session, full_url, image_filename)
                                    else:
                                        image_saved = self.save_image(image_data, image_filename)
                                    break
                        else:
                            # –ù–µ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á—É—é sutra
                            print(f"  ‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è sutra –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫: {', '.join(tried_sutras)}")
                            if attempt < max_retries:
                                continue
                    elif attempt < max_retries:
                        continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                if not self.quiet_mode:
                    print(f"\n  ‚Üí –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞...")
                text = await self.extract_tibetan_text(page, page_id)
                
                text_saved = False
                if text:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
                    if not self.quiet_mode:
                        preview = text[:150] + "..." if len(text) > 150 else text
                        print(f"  ‚Ñπ –ü—Ä–µ–≤—å—é: {preview}")
                    text_saved = self.save_text(page_id, text)
                else:
                    print(f"  ‚úó –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    if not image_saved and attempt < max_retries:
                        continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata_entry = {
                    'page_id': page_id,
                    'volume': volume,
                    'sutra': self.get_sutra_for_volume(volume),
                    'image_file': image_filename if image_saved else None,
                    'image_source': image_source,
                    'text_file': f"{page_id}.txt" if text_saved else None,
                    'text_length': len(text) if text else 0,
                    'text_preview': text[:200] if text else None,
                    'url': url,
                    'scraped_at': datetime.now().isoformat(),
                    'success': image_saved or text_saved,
                    'attempts': attempt
                }
                self.metadata.append(metadata_entry)
                
                success = image_saved and text_saved
                
                if success:
                    if not self.quiet_mode:
                        print(f"\n  ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    return (True, used_cache)
                elif image_saved or text_saved:
                    print(f"\n  ‚ö† –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ")
                    return (False, used_cache)
                else:
                    # –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    if attempt < max_retries:
                        print(f"\n  ‚ö† –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        print(f"\n  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                        return (False, used_cache)
                
            except Exception as e:
                print(f"\n  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}): {str(e)}")
                if attempt < max_retries:
                    import traceback
                    traceback.print_exc()
                    continue
                else:
                    import traceback
                    traceback.print_exc()
                    return (False, used_cache)
        
        return (False, used_cache)
    
    def generate_page_ids(self, start_vol: int, end_vol: int, start_page: int, end_page: int) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ ID —Å—Ç—Ä–∞–Ω–∏—Ü
        –§–æ—Ä–º–∞—Ç: {vol}-{page}{a/b}
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°—Ç—Ä–∞–Ω–∏—Ü–∞ {vol}-1a –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ—ç—Ç–æ–º—É –Ω–∞—á–∏–Ω–∞–µ–º —Å {vol}-1b
        """
        page_ids = []
        for vol in range(start_vol, end_vol + 1):
            for page_num in range(start_page, end_page + 1):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É 1a –¥–ª—è –∫–∞–∂–¥–æ–≥–æ volume - –æ–Ω–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if page_num == 1:
                    page_ids.append(f"{vol}-{page_num}b")  # –¢–æ–ª—å–∫–æ 1b
                else:
                    page_ids.append(f"{vol}-{page_num}a")
                    page_ids.append(f"{vol}-{page_num}b")
        return page_ids
    
    async def run(self, page_ids: Optional[List[str]] = None, max_pages: Optional[int] = None, 
                  headless: bool = True):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
        """
        if page_ids is None:
            page_ids = self.generate_page_ids(1, 1, 1, 5)
        
        if max_pages:
            page_ids = page_ids[:max_pages]
        
        print(f"\n{'#'*60}")
        print(f"# –ü–ê–†–°–ï–† –¢–ò–ë–ï–¢–°–ö–ò–• –¢–ï–ö–°–¢–û–í")
        print(f"{'#'*60}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(page_ids)}")
        print(f"–ö–∞—Ç–∞–ª–æ–≥: {self.kdb}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ sutra
        if self.auto_sutra:
            print(f"–†–µ–∂–∏–º sutra: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô")
            print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è sutra: {self.sutra}")
            print(f"  –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: {self.max_sutra_attempts}")
            print(f"  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π sutra")
            if self.volume_sutras:
                print(f"  –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ sutra:")
                for vol, sutra in sorted(self.volume_sutras.items()):
                    print(f"    Volume {vol}: {sutra}")
        elif self.volume_sutras:
            print(f"–°—É—Ç—Ä—ã –ø–æ volume:")
            for vol, sutra in sorted(self.volume_sutras.items()):
                print(f"  Volume {vol}: {sutra}")
            print(f"–°—É—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.sutra}")
        else:
            print(f"–°—É—Ç—Ä–∞: {self.sutra}")
        
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞: {self.output_dir.absolute()}")
        print(f"–§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.image_format.upper()}" + 
              (f" (–∫–∞—á–µ—Å—Ç–≤–æ: {self.jpeg_quality}%)" if self.image_format == 'jpeg' else ""))
        print(f"–†–µ–∂–∏–º –±—Ä–∞—É–∑–µ—Ä–∞: {'headless' if headless else 'visible'}")
        print(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏: {self.delay_between_pages} —Å–µ–∫ (–Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫—ç—à—É)")
        print(f"–õ–∏–º–∏—Ç –Ω–µ—É–¥–∞—á –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ volume: {self.max_failed_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
        if self.quiet_mode:
            print(f"–†–µ–∂–∏–º –≤—ã–≤–æ–¥–∞: –¢–ò–•–ò–ô (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)")
        print(f"{'#'*60}\n")
        
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=headless)
            context = await browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            )
            page = await context.new_page()
            
            # –í–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ console.log –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ quiet_mode)
            if not self.quiet_mode:
                page.on("console", lambda msg: print(f"  [Browser] {msg.text}"))
            
            async with aiohttp.ClientSession() as session:
                success_count = 0
                partial_count = 0
                fail_count = 0
                
                skip_until_next_volume = False
                skipped_count = 0
                
                for i, page_id in enumerate(page_ids, 1):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π volume
                    volume = int(page_id.split('-')[0])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—ã–π volume
                    if self.current_volume != volume:
                        self.current_volume = volume
                        self.failed_pages_in_volume = 0
                        skip_until_next_volume = False  # –ù–æ–≤—ã–π volume - –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                    
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ volume, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if skip_until_next_volume:
                        print(f"\n[{i}/{len(page_ids)}] ‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_id} (volume {volume} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è)")
                        skipped_count += 1
                        continue
                    
                    print(f"\n[{i}/{len(page_ids)}]")
                    
                    try:
                        success, used_cache = await self.scrape_page(page, session, page_id)
                        
                        if success:
                            success_count += 1
                            self.failed_pages_in_volume = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                        else:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ —É—Å–ø–µ—Ö
                            if self.metadata and self.metadata[-1].get('success'):
                                partial_count += 1
                                self.failed_pages_in_volume = 0  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è
                            else:
                                fail_count += 1
                                self.failed_pages_in_volume += 1
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á
                                if self.failed_pages_in_volume >= self.max_failed_pages:
                                    print(f"\n  ‚ö† –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á ({self.max_failed_pages}) –¥–ª—è volume {volume}")
                                    print(f"  ‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã volume {volume}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É volume")
                                    skip_until_next_volume = True
                        
                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å (–Ω–µ –∏–∑ –∫—ç—à–∞)
                        if not used_cache:
                            if not self.quiet_mode:
                                print(f"  ‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ {self.delay_between_pages} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º HTTP –∑–∞–ø—Ä–æ—Å–æ–º...")
                            time.sleep(self.delay_between_pages)
                        else:
                            if not self.quiet_mode:
                                print(f"  ‚ö° –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–µ—Ä–∂–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ –∫—ç—à–∞)")
                        
                    except KeyboardInterrupt:
                        print("\n\n‚ö† –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                        break
                    except Exception as e:
                        print(f"\n  ‚úó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                        fail_count += 1
                        self.failed_pages_in_volume += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á –∏ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
                        if self.failed_pages_in_volume >= self.max_failed_pages:
                            print(f"\n  ‚ö† –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á ({self.max_failed_pages}) –¥–ª—è volume {volume}")
                            print(f"  ‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã volume {volume}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É volume")
                            skip_until_next_volume = True
                        continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                self.save_metadata()
            
            await browser.close()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{'#'*60}")
        print(f"# –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê")
        print(f"{'#'*60}")
        print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(page_ids)}")
        print(f"‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—à–Ω–æ: {success_count}")
        print(f"‚ö† –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ: {partial_count}")
        print(f"‚úó –ù–µ—É–¥–∞—á–Ω–æ: {fail_count}")
        if skipped_count > 0:
            print(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á): {skipped_count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        total_processed = success_count + partial_count + fail_count
        if self.http_requests_saved > 0:
            print(f"\n‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:")
            print(f"  HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {self.http_requests_saved}")
            if total_processed > 0:
                efficiency = (self.http_requests_saved / total_processed) * 100
                print(f"  –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {efficiency:.1f}%")
        
        print(f"\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir.absolute()}")
        print(f"  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {self.images_dir}")
        print(f"  - –¢–µ–∫—Å—Ç—ã: {self.texts_dir}")
        print(f"  - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {self.metadata_file}")
        print(f"{'#'*60}\n")


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–∏–±–µ—Ç—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤ —Å adarshah.org (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML)',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –¢–µ—Å—Ç –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∫–∞—Ç–∞–ª–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - degekangyur)
  python improved_parser.py --pages 1-1b
  
  # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–î–ë–û–† SUTRA (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞!)
  python improved_parser.py --auto-sutra --sutra d1 --start-vol 1 --end-vol 100 --start-page 1 --end-page 100
  
  # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –¥–ª—è degetengyur
  python improved_parser.py --kdb degetengyur --auto-sutra --sutra D1109 --start-vol 1 --end-vol 50 --start-page 1 --end-page 100
  
  # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Å JPEG –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º –ø–æ–ø—ã—Ç–æ–∫
  python improved_parser.py --auto-sutra --sutra d1 --max-sutra-attempts 20 --start-vol 1 --end-vol 100 --image-format jpeg --jpeg-quality 85
  
  # –†—É—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ sutra –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö volumes
  python improved_parser.py --volume-sutras 1:d1 2:d2 3:d3 --start-vol 1 --end-vol 3 --start-page 1 --end-page 100
  
  # –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ degetengyur —Å —Ä—É—á–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º sutra
  python improved_parser.py --kdb degetengyur --sutra D1109 --pages 1-1b
  
  # –ü–∞—Ä—Å–∏–Ω–≥ —Å –≤–∏–¥–∏–º—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  python improved_parser.py --auto-sutra --pages 1-1b --no-headless
  
  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
  python improved_parser.py --auto-sutra --sutra d1 --start-vol 1 --end-vol 100 --quiet
  
–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
  - –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1-1a –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ –∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞
  - --auto-sutra –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é sutra –¥–ª—è –∫–∞–∂–¥–æ–≥–æ volume, –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É—è —á–∏—Å–ª–æ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–∞—Ö
  - –ü—Ä–∏ --auto-sutra –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å {volume}-1b —Å —Ä–∞–∑–Ω—ã–º–∏ sutra (d1, d2, d3...) –¥–æ —É—Å–ø–µ—Ö–∞
  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ --max-sutra-attempts (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
  
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:
  - –ü–∞—Ä—Å–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫—ç—à–∏—Ä—É–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  - –ö–æ–≥–¥–∞ –æ–¥–Ω–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-1b, 1-25a, 1-25b),
    –ø–∞—Ä—Å–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à –∏ –ù–ï –¥–µ–ª–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
  - –ó–∞–¥–µ—Ä–∂–∫–∞ (--delay) –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫ —Ä–µ–∞–ª—å–Ω—ã–º HTTP –∑–∞–ø—Ä–æ—Å–∞–º, —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫—ç—à–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
  - –≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        """
    )
    
    parser.add_argument('--output', '-o', default='tibetan_data', 
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--kdb', default='degekangyur',
                       help='–ö–∞—Ç–∞–ª–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: degekangyur, degetengyur)')
    parser.add_argument('--sutra', default='d1',
                       help='–°—É—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: d1, D1109)')
    parser.add_argument('--volume-sutras', nargs='+', metavar='VOLUME:SUTRA',
                       help='–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ volume->sutra (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1:d1 2:d2 3:d3)')
    parser.add_argument('--auto-sutra', action='store_true',
                       help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä sutra –¥–ª—è –∫–∞–∂–¥–æ–≥–æ volume (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —á–∏—Å–ª–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–∞—Ö)')
    parser.add_argument('--max-sutra-attempts', type=int, default=10,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ sutra (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)')
    parser.add_argument('--max-failed-pages', type=int, default=5,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º volume (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)')
    parser.add_argument('--image-format', choices=['png', 'jpeg'], default='png',
                       help='–§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: png –∏–ª–∏ jpeg (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: png)')
    parser.add_argument('--jpeg-quality', type=int, default=95, 
                       help='–ö–∞—á–µ—Å—Ç–≤–æ JPEG –æ—Ç 1 –¥–æ 100 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 95)')
    parser.add_argument('--delay', type=float, default=2.0,
                       help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏–∑ –∫—ç—à–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2.0)')
    parser.add_argument('--start-vol', type=int, default=1, 
                       help='–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)')
    parser.add_argument('--end-vol', type=int, default=1, 
                       help='–ö–æ–Ω–µ—á–Ω—ã–π —Ç–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)')
    parser.add_argument('--start-page', type=int, default=1, 
                       help='–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)')
    parser.add_argument('--end-page', type=int, default=5, 
                       help='–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)')
    parser.add_argument('--max-pages', type=int, 
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü')
    parser.add_argument('--pages', nargs='+', 
                       help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-1b 1-2a)')
    parser.add_argument('--no-headless', action='store_true',
                       help='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)')
    parser.add_argument('--quiet', '-q', action='store_true',
                       help='–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —Å–∫—Ä—ã–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    # –ü–∞—Ä—Å–∏–º volume-sutras –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    volume_sutras = {}
    if args.volume_sutras:
        for mapping in args.volume_sutras:
            try:
                volume_str, sutra = mapping.split(':')
                volume = int(volume_str)
                volume_sutras[volume] = sutra
            except ValueError:
                print(f"‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç volume-sutra: {mapping}. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç VOLUME:SUTRA (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1:d1)")
                continue
    
    scraper = ImprovedTibetanScraper(
        output_dir=args.output, 
        kdb=args.kdb, 
        sutra=args.sutra,
        image_format=args.image_format,
        jpeg_quality=args.jpeg_quality,
        delay_between_pages=args.delay,
        volume_sutras=volume_sutras,
        auto_sutra=args.auto_sutra,
        max_sutra_attempts=args.max_sutra_attempts,
        max_failed_pages=args.max_failed_pages,
        quiet_mode=args.quiet
    )
    
    if args.pages:
        page_ids = args.pages
    else:
        page_ids = scraper.generate_page_ids(
            args.start_vol, args.end_vol,
            args.start_page, args.end_page
        )
    
    await scraper.run(
        page_ids=page_ids, 
        max_pages=args.max_pages,
        headless=not args.no_headless
    )


if __name__ == "__main__":
    asyncio.run(main())

